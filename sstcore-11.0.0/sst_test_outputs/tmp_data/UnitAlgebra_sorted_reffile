












'0 s'.isValueZero() = True
-10 ns = -10 ns
10 ns < 10 ns = False
10 ns > 10 ns = False
10 ns != 10 ns = False
10 ns <= 10 ns = True
10 ns == 10 ns = True
10 ns >= 10 ns = True
10 ns == 15 ns = False
10 ns >= 15 ns = False
10 ns > 15 ns = False
10 ns <= 15 ns = True
10 ns < 15 ns = True
10 ns != 15 ns = True
'10 ns'.hasUnits("Hz") = False
'10 ns'.hasUnits("ns") = True
'10 ns'.hasUnits("s") = True
'10 ns'.invert() = 100 MHz
1.5 
150 as-s
15 ns
15 ns
15 ns
15 ns
15 ns / 10 ns = 1.5 
15 ns * 10 ns = 150 as-s
15 ns + 10 ns = 25 ns
15 ns - 10 ns = 5 ns
'1.77 s'.getFloatValue() = 1.770000
'1.77 s'.getFloatValue() = 1.770000
'1.77 s' to float = 1.770000
'1.77 s' to float = 1.770000
'1 GHz'.getRoundedValue() = 1000000000
'1 GHz' to long = 1000000000
25 ns
5 ns
'5 ns'.isValueZero() = False
Addition:
bool(0 s) = False
bool(5 ns) = True
Comparison functions:
Conversion to bool:
Conversion to float:
Conversion to float:
Conversion to int:
Correctly got exception when checking equals against invalid operand type as first argument
Correctly got exception when checking equals against invalid operand type as second argument
Correctly got exception when checking not equals against invalid operand type as first argument
Correctly got exception when checking not equals against invalid operand type as second argument
Correctly got exception when comparing against invalid operand type as first argument
Correctly got exception when comparing against invalid operand type as second argument
Division:
Exception correctly thrown for wrong operand type passed to math operation (+,-,*,/) as first argument
Exception correctly thrown for wrong operand type passed to math operation (+,-,*,/) as second argument
executing the following for each operator:
hasUnits():
In-place math operations:
Invert:
isValueZero():
Multiplication:
Negate:
print(ua3)  -- should have the result of operation
print(ua4)  -- should be unchanged
Simple math operations:
Simulation is complete, simulated time: 0 s
Subtraction:
ua1 = UnitAlgebra("15ns")
ua2 = UnitAlgebra("10ns")
ua3 op= ua2
ua3 = ua1
ua4 = ua3
